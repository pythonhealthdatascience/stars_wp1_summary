---
title: "Comparison to other studies"
bibliography: ../references.bib
---

**In-progress**

TODO: Consider, would there be any relevant literature related to time spent to try and get someone elses code mentioned - like how Andy mentioned there would be a max amount of time that someone in the NHS would reasonably spend troubleshooting

TODO: Add page comparing our findings to other studies. This could include:

* Studies that have gone through this same process of finding barriers in reproductions
* Studies that recommend how to share code (although, it might be simpler to just start with that first bullet and then decide whether to do both)

*Do we also compare the evaluation results? Or do we just use that in context of barriers?* (e.g. @schwander_replication_2021 and @zhang_reporting_2020 for reporting... @laurinavichyute_share_2022 for code...)

*not sure if want to be comparing the actual proportions reproduced... or maybe do, but important to bare in mind what is being compared and what define as success... e.g. some include studies that haven't shared the code*

Starting points:

* @krafczyk_learning_2021 - results are recommendations based on experiences, which were:
    * can see completion in figure 1
    * being clear on links between article, code and data (e.g. which code uses which data, and which parts of code made each bit of article)
    * include scripts for each aspect of article, with it easy to locate the scripts needed, and the scripts including the parameters needed and clearly label
    * be clear about hardware needed, e.g. if large amount of computing resources would be required. at least report hardware used. ideally include "small test case that can be run by users with conventional hardware"
    * list software dependencies and versions
    * use seeds, and report seed you used
    * make all code and data available with an appropriate licence
    * include master script that runs in computations in publication
    * use same terminology in code and article
    * use version control and specify the e.g. commit hash that identifies the version used
    * avoid hard coding parameters
    * design scripts in a way that allows people to easily change parameters and run again
    * avoid hard coding file paths
    * provide script that checks whether users results match original (within expected deviation)
    * if compare against competing methods, include info on how those were implemented and tested
    * use build system for C/C++ code
    * provide scripts to make the figures and tables
* @wood_push_2018
    * complete data: 27 comparable results, 5 minor differences, 0 major differences
    * incomplete data: 10 comparable, 4 minor differences, 1 major differences
    * main issue was the code and data not being shared
* @schwander_replication_2021
    * reproduction success for 3 out of 4 models
    * facilitators:
        * "Model structure and possible state transitions were presented in a state transition diagram"
        * "Overview of input parameters was provided in table format"
    * hurdles:
        * "PSAs were performed" (probablistic sensitivity analysis)
        * "Relevant PSA values for PSA result reproduction were provided (type of distribution and either mean and standard deviation or distribution parameters were provided)"
        * "Clinical event simulation results were provided (which are very helpful to guide potential assumptions to be made for rebuilding the model and which provide an additional means of testing the fit of the replication)"
        * "Relevant details on the underlying life tables were provided (including year of data)"
        * "Several self-created regression equations were introduced but without details on how to apply/solve the provided regressions correctly"
* @laurinavichyute_share_2022
* @konkol_computational_2019
* @hardwicke_analytic_2021
* @monks_computer_2023 (although overlap - look at how many of mine are from the review - some were identified from that, but some were not)
* @henderson_reproducibility_2024
* @samuel_computational_2024
    * Reproduction success:
        * 27,271 jupyter notebooks (2660 GitHub repositories, 3467 publications, majority python)
        * 15,817 included dependencies in standard requirement files
        * Of those, 10,388 could be installed successfully
        * Of those, 1203 ran without error
        * Of those, 879 produced results identical to those reported in the original notebook
    * References several other studies that have attempted to re-run jupyter notebooks
    * ModuleNotFoundError, ImportError and FileNotFounderError were the top 3 common exceptions
    * Also used `flakenb` to look for code styling errors
    * Implications:
        * Low reproducibility as in prior studies
        * Review processes don't pay attention to journal reproducibiltiy
        * Common errors around dependencies... Use exiting approaches like requirements, conda and poetry
        * Some journals, article types, levels of documentation and research fields had more reproduced notebooks than others. Worth considering procedures at those journals with most reproduced (**iScience**). Also, notebooks combining computation and narrative.
        * Things go out of data... importance of pre-prints...
        * Reproducibility badges, reproducibility platforms like REScience, nanopublications

And some relevant articles/discussions:

* @hrynaszkiewicz_survey_2021
    * Survey in Autumn 2020 of previous authors and other registered users with PLOS Computational Biology
    * 214 complete responses
    * Lots had papers where code was not shared - reasons inc (1) takes too much time to prepare code for sharing, (2) software and systems dependencies (3) concerns with my ability to prepare the code for sharing (4) I needed to protect intellectual property, etc...
    * More likely to submit to journal if mandatory code sharing policy (moreso for ECR)
    * Low mean satisfication score for accessing others code (44.0)
* @cadwallader_survey_2022
    * Survey in Spring 2021 of previous authors and other registers used with PLOS computational biology related disciplines
    * 188 complete responses
    * Questions on
        * How often look at code associated with research articles
        * Whether have encountered different methods of code sharing
        * How useful found different methods of accessing code - **link to code repository was rated most useful - with code "available upon request" least useful**. When explaining why link was most useful, common reasons were: (**a) ability to see new versions of code (b) quick access to code (c) good documentation/README (d) practicality (e) reproduction of results (f) established**. For sharing via notebooks, like ability to explore code and reproduction of results. For archived code, like that it gives long term access.
        * Features of code notebooks that are useful when accessing/reading code, highest ranked: (1) having all code, data and figures in one place, (2) knowing code is running in right environment (3) ability to interact inline with code in browser (4) ability to uncover data point by hovering over point in graph ...etc
        * Satisifcation and importance scores of factors associated with sharing code
        * Time spent preparing and sharing code
        * Extra time willing to spend to make code easier to read and run
* @noauthor_revisiting_2022
    * Initiative from Nature Machine Intelligence to have new article type **"Reusability Report"** where researchers try code from article in journal and try running it, applying to new data or tweaking or extending it
* @mejba_evolution_2023
    * Lists **benefits of code reuse**: increase **productivity**, improved code quality, reduced errors, cost efficiency, faster time-to-market, **knowledge sharing**, scalability, sustainability, innovation
    * Lists challenges of code reuse: **understanding reused code**, integration issues, incompatability, maintaining and updating reused code, **licensing and ownership**, security risks, quality control, overhead, dependency management
    * Gives solutions to changes e.g. understanding reused code --> **comprehensive documentation**
    * Strategies for effective code reuse... modular design, use of libraries and frameworks, design patterns, object oriented programming, apis and microservices, code documentation, automated testing, refactoring, code reviews, ci/cd
    * Lists security implications of code reuse, and best practices for security
    * Impacts of code reuse on software development lifecycle:
        * Planning and analysis - **reuse code can reduce time and resources required, although crucial to check code compatability, quality and security to meet needs**
        * Design - design of code can facilitate reuse
        * Implementation - reuse snippets, lirbaries, etc.
        * Testing - reused code can have benefit of being previously tests so less bugs, more stable software, but will need rigorous re test
        * Deployment - if code has depenedencies, need to manage properly eg docker
        * Maintenance - if reused code well understood and well documentation can make maintence easier
* @dupre_beyond_2022
    * <https://theplosblog.plos.org/2022/05/uphold-the-code/> describes the article, saying " DuPree and colleagues draw a distinction between the scholarly article, which they argue functions as a kind of preview or entrypoint to the research, and the real scholarly work. That is, the methods researchers develop (in this case software and code), and the data they gather and analyze in order to produce a result. Itâ€™s this data and code which forms the core of the research, the fulcrum on which everything else turns. For that reason, code not only deserves a place in the literature, it is required in order to fully understand and appreciate the scholarship."
    * Article is about "**hybrid research objects**" - i.e. multiple content types, so narrative text plus at least one of: code, data, and/or computation. Can link in data/code availability statements. Publisher may require those linked objects to meet specific standards and include as part of review process. "Hope to see more hybrid research objects where each linked object is formatted with domain-relevant standards... and bi-directionally linked using persistent identifiers"
    * Article then talks about interactive research objects, with everything all in one place, like "executable research articles", RMArkdown, Jupyter Book, Binder, Pangeo, NeuroLibre
* @benureau_re-run_2018
    * https://www.frontiersin.org/journals/neuroinformatics/articles/10.3389/fninf.2017.00069/full#B22
    * "In conclusion, the R3 **(reproducible) form should be accepted as the minimum scientific standard** (Wilson et al., 2017). "
* @wilson_good_2017
    * https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510
* @gomes_why_2022
    * https://royalsocietypublishing.org/doi/full/10.1098/rspb.2022.1113
    * Figure 1 is a nice visualisation
* @connolly_software_2023
    * https://par.nsf.gov/servlets/purl/10510561
* https://www.nature.com/articles/nn.4550